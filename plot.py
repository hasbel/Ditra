# Copyright (c) 2015 Hassib Belhaj-Hassine <hassib.belhaj at tum.de>

"""
This script is used during the evaluation process to generate plots
using a capture file in the predefined format generated by tshark.
"""

import matplotlib.pyplot as plt

# ------------------ Configuration ------------------

capture_file = "/home/hassib/capture"
log_file = "/home/hassib/workspace/Evaluation/loss.log"

# ---------------------------------------------------

def parse_capture(
        path=capture_file, plot=False, xlim=None, ylim=None,
        migration_xid=None):
    """Parse the capture file to calculate latency, generate a plot.

    :param xlim: limits for the x axis in the plot
    :param ylim: limits for the y axis in the plot
    :param migration_xid: The xid representing the migration procedure
    """
    f = open (path)
    request_dict = {}
    reply_dict = {}
    latency_dict = {}
    duplicated_packets = []
    lost_packets = []
    loss = 0
    duplication = 0
    for line in f:
        line = line[:-1]
        # register packet time and remove it from line
        separator = line.index(",")
        packet_time = line[:separator]
        line = line[(separator+1):]
        #determine if line contains requests or replies
        if line[0] == ",":
            # we have replies, get reply id
            replies = line[1:].split(",")
            for reply in replies:
                if reply:
                    reply_xid = int(reply)
                    if reply_xid in reply_dict:
                        duplication += 1
                        duplicated_packets.append(reply_xid)
                    elif reply_xid < 200000:
                        reply_dict[reply_xid] = packet_time
        else:
            # we have requests, get request id
            requests = line.split(",")
            for request in requests:
                if request:
                    request_xid = int(request)
                    if (request_xid not in request_dict) and request_xid<200000:
                        request_dict[request_xid] = packet_time

    for xid in request_dict.keys():
        if xid in reply_dict:
            if xid < 200000:
                latency = float(reply_dict[xid]) - float(request_dict[xid])
                latency_dict[xid] = latency
        else:
            loss += 1
            lost_packets.append(xid)
    if plot:
        print "loss: %i" % loss
        if loss:
            print "Lost packets: ", lost_packets
        print "duplication: %i" % duplication
        if duplication:
            print "Duplicated packets: ", duplicated_packets
        plt.clf()
        plt.plot(latency_dict.keys(), latency_dict.values())
        if migration_xid:
            plt.plot(migration_xid, latency_dict[migration_xid], "ro")
        plt.ylabel('Latency')
        plt.xlabel('Packet number')
        plt.xlim(xlim)
        plt.ylim(ylim)
        plt.savefig(path+'.png', bbox_inches='tight')
        plt.savefig(path+'.pdf', bbox_inches='tight')
    else:
        return latency_dict


def plot_migration_window():
    """Generate a plot of just the migration window

    Determin the point where the migration happened based on log file
    and call parse_capture()
    """
    capture_path = "/home/hassib/capture"
    switch_migration_xid = None
    controller_migration_xid = None
    log = open("/home/hassib/workspace/Evaluation/loss.log")
    log = list(log)[-2:]
    f = open(capture_path)
    if f.read() == "":
        pass
    else:
        for line in log:
            if "Switch migrated:" in line:
                switch_migration_xid = int(line[17:])
            elif "Controller migrated:" in line:
                controller_migration_xid = int(line[21:])
        if switch_migration_xid > controller_migration_xid:
            parse_capture(path=capture_path, plot=True,
                          xlim=[controller_migration_xid-100, switch_migration_xid+100],
                          migration_xid=controller_migration_xid)
        else:
            parse_capture(path=capture_path, plot=True,
                          xlim=[switch_migration_xid-100, controller_migration_xid+100],
                          migration_xid=controller_migration_xid)


if __name__ == "__main__":
    plot_migration_window()
